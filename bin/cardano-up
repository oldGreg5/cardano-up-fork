#!/usr/bin/env ruby
require 'cardano_up'
require 'docopt'

doc = <<DOCOPT
Cardano Up!
Lightweight manager for Cardano binaries and configs.

Usage:
  #{File.basename(__FILE__)} install [<release>]
  #{File.basename(__FILE__)} get-configs <env>
  #{File.basename(__FILE__)} start <env> (node|wallet|node-wallet) [--port <port>]
  #{File.basename(__FILE__)} stop <env> (node|wallet|node-wallet)
  #{File.basename(__FILE__)} status
  #{File.basename(__FILE__)} config [--set-default] [--bindir <path>] [--configdir <path>] [--logdir <path>] [--statedir <path>]
  #{File.basename(__FILE__)} -v | --version
  #{File.basename(__FILE__)} -e | --examples
  #{File.basename(__FILE__)} -h | --help

Options:
  install                 Install cardano-wallet bundle.
  <release>               latest | release tag | master | pr num [default: latest]
  get-configs             Get configs for particular Cardano env.
  start                   Start wallet and node.
  stop                    Stop wallet and node.
  <env>                   mainnet | preview | preprod etc.
  --port <port>           Specify wallet port. [default: 8090]

  config                  See or set config at $HOME/.cardano-up.json.
  --set-default           Overwrite config with default values.
  --bindir <path>         Set bin dir.
  --configdir <path>      Set config dir.
  --logdir <path>         Set log dir.
  --statedir <path>       Set state dir.

  -v --version            Check #{File.basename(__FILE__)} version and versions of
                          installed binaries if available.
  -e --examples           Show some examples.
  -h --help               This help.
DOCOPT

def pretty_json(c)
  puts JSON.pretty_generate(c)
end

def ok
  STDERR.puts "Ok."
end

begin
  CardanoUp.configure_default unless CardanoUp.configured?
  o = Docopt::docopt(doc)
  # pretty_json(o)

  # EXAMPLES
  if o['--examples'] == true
    STDERR.puts %(Examples:
      Install latest release of cardano-wallet bundle:
        $ #{File.basename(__FILE__)} install latest

      Get configs for 'preprod' environment:
        $ #{File.basename(__FILE__)} get-configs preprod

      Start node and wallet on 'preprod':
        $ #{File.basename(__FILE__)} start preprod node
        $ #{File.basename(__FILE__)} start preprod wallet

      Check status:
        $ #{File.basename(__FILE__)} status

      Stop node and wallet on 'preprod':
        $ #{File.basename(__FILE__)} stop preprod node-wallet)
  end

  # VERSION
  if o['--version'] == true
    STDERR.puts "#{File.basename(__FILE__)}: #{CardanoUp::VERSION}"
    STDERR.puts
    begin
      pretty_json CardanoUp::Install.return_versions
    rescue StandardError => e
      STDERR.puts "Nothing installed? To fix run:"
      STDERR.puts " $ #{File.basename(__FILE__)} install"
      STDERR.puts e
    end
    exit 1
  end

  # CONFIG
  if o['config'] == true
    c = CardanoUp.get_config
    if o['--set-default'] == true
      c = CardanoUp.configure_default
      STDERR.puts "Configs set to default!"
    end
    if o['--bindir']
      bindir = o['--bindir']
      c = CardanoUp.configure(bindir, nil, nil, nil)
      STDERR.puts "Installdir updated!"
    end
    if o['--statedir']
      statedir = o['--statedir']
      c = CardanoUp.configure(nil, statedir, nil, nil)
      STDERR.puts "Statedir updated!"
    end
    if o['--logdir']
      logdir = o['--logdir']
      c = CardanoUp.configure(nil, nil, logdir, nil)
      STDERR.puts "Logdir updated!"
    end
    if o['--configdir']
      configdir = o['--configdir']
      c = CardanoUp.configure(nil, nil, nil, configdir)
      STDERR.puts "Configdir updated!"
    end

    STDERR.puts "Your config file is #{CardanoUp.adrestia_bundler_config}:"
    STDERR.puts
    pretty_json(c)
    exit
  end

  # INSTALL
  if o['install'] == true
    release = o['<release>']
    begin
      STDERR.puts "Installing..."
      versions = CardanoUp::Install.install_bins(release)
    rescue CardanoUp::VersionNotSupportedError => err3
      STDERR.puts(err3.message)
      exit 1
    end
    STDERR.puts "Installed '#{release}' release of cardano-wallet bundle."
    STDERR.puts "Install dir: #{CardanoUp.get_config['bin_dir']}"
    STDERR.puts
    pretty_json(versions)
    exit
  end

  # INSTALL CONFIGS
  if o['get-configs'] == true
    env = o['<env>']
    begin
      configs = CardanoUp::Install.install_configs(env)
    rescue CardanoUp::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1
    end
    STDERR.puts "Downloaded configs for '#{env}' environment."
    STDERR.puts "Config dir: #{File.join(CardanoUp.get_config['config_dir'], env)}"
    STDERR.puts
    pretty_json(configs)
    exit
  end

  # START
  if o['start'] == true
    env = o['<env>']
    port = o['--port']

    begin
      STDERR.print "Configs check: "
      if CardanoUp::Install.configs_exist?(env)
        ok
      else
        STDERR.print "installing configs for #{env}... "
        CardanoUp::Install.install_configs(env)
        ok
      end

      STDERR.print "Binaries check: "
      begin
        CardanoUp::Install.return_versions
        ok
      rescue StandardError
        STDERR.print "installing latest release binaries... "
        CardanoUp::Install.install_bins('latest')
        ok
      end

      STDERR.puts
      STDERR.puts "Starting..."
      STDERR.puts
      c = CardanoUp::Start.prepare_configuration({ env: env, wallet_port: port })
    rescue CardanoUp::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1
    end
    begin
      if o['node']
        pretty_json CardanoUp::Start.start_node(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-node!"
      elsif o['wallet']
        pretty_json CardanoUp::Start.start_wallet(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-wallet!"
      elsif o['node-wallet']
        pretty_json CardanoUp::Start.start_node_and_wallet(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-node and cardano-wallet!"
      end
    rescue StandardError => e
      STDERR.puts "Either you miss configs or binaries... To fix that try running:"
      STDERR.puts " $ #{File.basename(__FILE__)} get-configs #{env}"
      STDERR.puts " $ #{File.basename(__FILE__)} install"
      STDERR.puts e
      exit 1
    end
  end

  # STOP
  if o['stop'] == true
    env = o['<env>']

    begin
      if o['node']
        CardanoUp::Start.stop_node(env)
      elsif o['wallet']
        CardanoUp::Start.stop_wallet(env)
      elsif o['node-wallet']
        CardanoUp::Start.stop_node_and_wallet(env)
      end
      STDERR.puts "Stopped."
    rescue CardanoUp::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1

    end
  end

rescue Docopt::Exit => e
  puts e.message
end
