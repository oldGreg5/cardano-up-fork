#!/usr/bin/env ruby
require 'cardano_up'
require 'docopt'

doc = <<DOCOPT
Cardano Up!
Lightweight manager for cardano configs and binaries.

Usage:
  cardano-up install [<release>]
  cardano-up get-configs <env>
  cardano-up start <env> (node|wallet|node-wallet) [--port <port>]
  cardano-up stop <env> (node|wallet|node-wallet)
  cardano-up status
  cardano-up config [--set-default] [--installdir <path>] [--configdir <path>] [--logdir <path>] [--statedir <path>]
  cardano-up -v | --version
  cardano-up -h | --help

Options:
  install                 Install cardano-wallet bundle.
  <release>               latest | release tag | master | pr num [default: latest]
  get-configs             Get configs for particular Cardano env.
  start                   Start wallet and node.
  stop                    Stop wallet and node.
  <env>                   mainnet | preview | preprod etc.
  --port <port>           Specify wallet port. [default: 8090]

  config                  See or set config at $HOME/.cardano-up.json.
  --set-default           Overwrite config with default values.
  --installdir <path>     Set install dir.
  --configdir <path>      Set config dir.
  --logdir <path>         Set log dir.
  --statedir <path>       Set state dir.

  -v --version            Check cardano-up version and versions of
                          installed binaries if available.
  -h --help               This help.

Examples:
  Install latest release of cardano-wallet bundle:
    $ cardano-up install latest

  Get configs for 'preprod' environment:
    $ cardano-up get-configs preprod

  Start node and wallet on 'preprod':
    $ cardano-up start preprod node
    $ cardano-up start preprod wallet

  Check status:
    $ cardano-up status

  Stop node and wallet on 'preprod':
    $ cardano-up stop preprod node-wallet

DOCOPT

def pretty_json(c)
  puts JSON.pretty_generate(c)
end

begin
  AdrestiaBundler.configure_default unless AdrestiaBundler.configured?
  o = Docopt::docopt(doc)
  # pretty_json(o)

  # VERSION
  if o['--version'] == true
    STDERR.puts "Adrestia Bundler: #{AdrestiaBundler::VERSION}"
    STDERR.puts
    begin
      pretty_json AdrestiaBundler::Install.return_versions
    rescue StandardError => e
      STDERR.puts "NOT INSTALLED? Run cardano-up install."
      STDERR.puts e
    end
    exit 1
  end

  # CONFIG
  if o['config'] == true
    c = AdrestiaBundler.get_config
    if o['--set-default'] == true
      c = AdrestiaBundler.configure_default
      STDERR.puts "Configs set to default!"
    end
    if o['--installdir']
      installdir = o['--installdir']
      c = AdrestiaBundler.configure(installdir, nil, nil, nil)
      STDERR.puts "Installdir updated!"
    end
    if o['--statedir']
      statedir = o['--statedir']
      c = AdrestiaBundler.configure(nil, statedir, nil, nil)
      STDERR.puts "Statedir updated!"
    end
    if o['--logdir']
      logdir = o['--logdir']
      c = AdrestiaBundler.configure(nil, nil, logdir, nil)
      STDERR.puts "Logdir updated!"
    end
    if o['--configdir']
      configdir = o['--configdir']
      c = AdrestiaBundler.configure(nil, nil, nil, configdir)
      STDERR.puts "Configdir updated!"
    end

    STDERR.puts "Your config file is #{AdrestiaBundler.adrestia_bundler_config}:"
    STDERR.puts
    pretty_json(c)
    exit
  end

  # INSTALL
  if o['install'] == true
    release = o['<release>']
    begin
      STDERR.puts "Installing..."
      versions = AdrestiaBundler::Install.install_bins(release)
    rescue AdrestiaBundler::VersionNotSupportedError => err3
      STDERR.puts(err3.message)
      exit 1
    end
    STDERR.puts "Installed '#{release}' release of cardano-wallet bundle."
    STDERR.puts "Install dir: #{AdrestiaBundler.get_config['bin_dir']}"
    STDERR.puts
    pretty_json(versions)
    exit
  end

  # INSTALL CONFIGS
  if o['get-configs'] == true
    env = o['<env>']
    begin
      configs = AdrestiaBundler::Install.install_configs(env)
    rescue AdrestiaBundler::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1
    end
    STDERR.puts "Downloaded configs for '#{env}' environment."
    STDERR.puts "Config dir: #{File.join(AdrestiaBundler.get_config['config_dir'], env)}"
    puts
    pretty_json(configs)
    exit
  end

  # START
  if o['start'] == true
    env = o['<env>']
    release = o['--release']
    port = o['--port']

    begin
      c = AdrestiaBundler::Start.prepare_configuration({ env: env, wallet_port: port })
    rescue AdrestiaBundler::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1
    end
    begin
      if o['node']
        pretty_json AdrestiaBundler::Start.start_node(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-node."
      elsif o['wallet']
        pretty_json AdrestiaBundler::Start.start_wallet(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-wallet."
      elsif o['node-wallet']
        pretty_json AdrestiaBundler::Start.start_node_and_wallet(c)
        STDERR.puts
        STDERR.puts "Congratulations! You've just started cardano-node and cardano-wallet."
      end
    rescue StandardError => e
      STDERR.puts "Either you miss configs or binaries... To fix that try running:"
      STDERR.puts " $ cardano-up get-configs #{env}"
      STDERR.puts " $ cardano-up install"
      STDERR.puts e
      exit 1
    end
  end

  # STOP
  if o['stop'] == true
    env = o['<env>']

    begin
      if o['node']
        AdrestiaBundler::Start.stop_node(env)
      elsif o['wallet']
        AdrestiaBundler::Start.stop_wallet(env)
      elsif o['node-wallet']
        AdrestiaBundler::Start.stop_node_and_wallet(env)
      end
      STDERR.puts "Stopped."
    rescue AdrestiaBundler::EnvNotSupportedError => err2
      STDERR.puts(err2.message)
      exit 1

    end
  end

rescue Docopt::Exit => e
  puts e.message
end
